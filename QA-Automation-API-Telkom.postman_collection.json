{
	"info": {
		"_postman_id": "7c20dc81-365d-4418-a491-b5fa4c6c8d16",
		"name": "QA-Automation-API-Telkom",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1352091"
	},
	"item": [
		{
			"name": "Get Beeceptor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 200) {",
							"    pm.test(\"Test failed\", function () {",
							"        pm.expect.fail('Please check your service or request and response!!!');",
							"    });",
							"    return;",
							"}",
							"",
							"const responseData = pm.response.json();",
							"",
							"// Validate Response Header and response time",
							"eval(pm.variables.get(\"HTTP_Header_Assertion\"))(200);",
							"",
							"const regexDateTime = \"^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$\";",
							"",
							"const Schema_Get_Beeceptor = ",
							"    {",
							"        \"type\": \"object\",",
							"  \"properties\": {",
							"    \"success\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"code\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"details\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"eventCode\": {",
							"          \"type\": \"number\"",
							"        },",
							"        \"message\": {",
							"          \"type\": \"string\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"eventCode\",",
							"        \"message\"",
							"      ]",
							"    },",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"data\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"uspcUpdatedAt\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"onu\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"stdOnu\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"onu\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"onuColor\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"charts\": {",
							"              \"type\": \"array\",",
							"              \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                  \"period\": {",
							"                    \"type\": \"string\"",
							"                  },",
							"                  \"value\": {",
							"                    \"type\": \"number\"",
							"                  }",
							"                },",
							"                \"required\": [",
							"                  \"period\",",
							"                  \"value\"",
							"                ]",
							"              }",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"stdOnu\",",
							"            \"onu\",",
							"            \"onuColor\",",
							"            \"charts\"",
							"          ]",
							"        },",
							"        \"olt\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"stdOlt\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"olt\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"oltColor\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"charts\": {",
							"              \"type\": \"array\",",
							"              \"items\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                  \"period\": {",
							"                    \"type\": \"string\"",
							"                  },",
							"                  \"value\": {",
							"                    \"type\": \"number\"",
							"                  }",
							"                },",
							"                \"required\": [",
							"                  \"period\",",
							"                  \"value\"",
							"                ]",
							"              }",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"stdOlt\",",
							"            \"olt\",",
							"            \"oltColor\",",
							"            \"charts\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"uspcUpdatedAt\",",
							"        \"onu\",",
							"        \"olt\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"success\",",
							"    \"code\",",
							"    \"details\",",
							"    \"message\",",
							"    \"data\"",
							"  ]",
							"}",
							"",
							"// Validate Json Response Schema",
							"eval(pm.variables.get(\"Response_Schema_Validation\"))(Schema_Get_Beeceptor);",
							"",
							"// Value should not be null or 0",
							"pm.test(\"Check Value is Null or 0\", function() {",
							"    pm.expect(responseData.data.onu.charts[0].value).not.equal(null);",
							"    pm.expect(responseData.data.onu.charts[0].value).not.equal(0);",
							"    pm.expect(responseData.data.olt.charts[0].value).not.equal(null);",
							"    pm.expect(responseData.data.olt.charts[0].value).not.equal(0);",
							"});",
							"",
							"// Check Onu and Olt Color",
							"pm.test(\"Check Onu and Olt Color\", function() {",
							"    if (responseData.data.onu.charts[0].value < -25) {",
							"        pm.expect(responseData.data.onu.onuColor).equal(\"#1F8B41\");",
							"    } else {",
							"        pm.expect(responseData.data.onu.onuColor).equal(\"#C72037\");",
							"    }",
							"    if (responseData.data.olt.charts[0].value < -25) {",
							"        pm.expect(responseData.data.olt.oltColor).equal(\"#1F8B41\");",
							"    } else {",
							"         pm.expect(responseData.data.olt.oltColor).equal(\"#C72037\");",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/* ================================================================= */",
							"/* HTTP HEADER VALIDATION              ",
							"/* ================================================================= */",
							"",
							"let HTTP_Header_Assertion = (responseCode) => {",
							"    var responseMap = {",
							"        200 : \"OK\",",
							"        201 : \"Created\",",
							"        400 : \"Bad Request\",",
							"        401 : \"Unauthorized\",",
							"        404 : \"Not Found\",",
							"        405 : \"Method Not Allowed\",",
							"        406 : \"Not Acceptable\",",
							"        409 : \"Conflict\",",
							"        415 : \"Unsupported Media Type\",",
							"        422 : \"Unprocessable Entity\",",
							"        429 : \"Too Many Requests\",",
							"        500 : \"Internal Server Error\",",
							"        501 : \"Not Implemented\",",
							"        502 : \"Bad Gateway\"",
							"    }",
							"",
							"    pm.test(\"HTTP response code is \" + responseCode + \" \" + responseMap[responseCode], function () {",
							"        pm.expect(pm.response.code).to.be.eql(responseCode);",
							"    });",
							"",
							"    pm.test(\"HTTP response header 'Content-Type' is present with value 'application/json'\", function () {",
							"        pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"    });",
							"",
							"    pm.test(\"Response time is less than 500 ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(500);",
							"    });",
							"",
							"    pm.test(\"Response body should be a valid JSON format\", function () {",
							"        pm.response.to.have.jsonBody();",
							"    });",
							"}",
							"",
							"pm.collectionVariables.unset(\"HTTP_Header_Assertion\");",
							"pm.collectionVariables.set(\"HTTP_Header_Assertion\", HTTP_Header_Assertion.toString());",
							"",
							"/*****************************************************/",
							"/* JSON Schema validation function ",
							"/*****************************************************/",
							"",
							"const Response_Schema_Validation = (schemaName) => {",
							"    pm.test(\"Response return an object\", function () {",
							"        pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty;",
							"    });",
							"",
							"    pm.test(\"Ensure JSON response schema is valid\", function () {",
							"        pm.response.to.have.jsonSchema(",
							"            JSON.parse(pm.variables.get(schemaName))",
							"        )",
							"    });",
							"}",
							"",
							"pm.collectionVariables.unset(\"Response_Schema_Validation\");",
							"pm.collectionVariables.set(\"Response_Schema_Validation\", Response_Schema_Validation.toString());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://qatest.free.beeceptor.com/qa/api/web",
					"protocol": "https",
					"host": [
						"qatest",
						"free",
						"beeceptor",
						"com"
					],
					"path": [
						"qa",
						"api",
						"web"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "HTTP_Header_Assertion",
			"value": ""
		},
		{
			"key": "Response_Schema_Validation",
			"value": ""
		}
	]
}